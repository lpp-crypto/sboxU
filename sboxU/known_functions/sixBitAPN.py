"""Contains many 6-bit APN functions"""

from sage.all import *

# global variables of the module
N = 6
F = GF(2**N, name="a")
g = F.gen()
POLY_RING = PolynomialRing(F, "X")
X = POLY_RING.gen()

# !SECTION! better  finite field functions; prototype

VERSION = tuple([int(x) for x in sage.version.version.split(".")])

if VERSION < (9, 8):
    def ffe_from_int(gf, x):
        if gf.characteristic() > 2:
            return gf(x)
        else:
            return gf.fetch_int(x)

    def ffe_to_int(x):
        return x.integer_representation()
        
else:
    def ffe_from_int(gf, x):
        return gf.from_integer(x)

    def ffe_to_int(x):
        return x.to_integer()
    


def poly_to_lut(p):
    s = []
    for x_i in range(0, 2**N):
        y = ffe_to_int(p(ffe_from_int(p.base_ring(), x_i)))
        s.append(y)
    return s


def kim_mapping():
    """The "Kim mapping", as used by Dillon et al to identify the 6-bit
    APN permutation.

    """
    return poly_to_lut(X**3 + g*X**24 + X**10)


def all_quadratics():
    """What follows is the Banff complete list of quadratic APN functions"""
    return [
        poly_to_lut(X**3),
        poly_to_lut(X**3 + g**11*X**6 + g*X**9),
        poly_to_lut(g*X**5 + X**9 + g**4*X**17 + g*X**18 + g**4*X**20 + g*X**24 + g**4*X**34 + g*X**40),
        poly_to_lut(g**7*X**3 + X**5 + g**3*X**9 + g**4*X**10 + X**17 + g**6*X**18),
        poly_to_lut(X**3 + g*X**24 + X**10), # 4 <-- KIM
        poly_to_lut(X**3 + g**17*(X**17 + X**18 + X**20 + X**24)),
        poly_to_lut(X**3 + g**11*X**5 + g**13*X**9 + X**17 + g**11*X**33 + X**48),
        poly_to_lut(g**25*X**5 + X**9 + g**38*X**12 + g**25*X**18 + g**25*X**36),
        poly_to_lut(g**40*X**5 + g**10*X**6 + g**62*X**20 + g**35*X**33 + g**15*X**34 + g**29*X**48),
        poly_to_lut(g**34*X**6 + g**52*X**9 + g**48*X**12 + g**6*X**20 + g**9*X**33 + g**23*X**34 + g**25*X**40),
        poly_to_lut(X**9 + g**4*(X**10 + X**18 ) + g**9*(X**12 + X**20 + X**40 )),
        poly_to_lut(g**52*X**3 + g**47*X**5 + g*X**6 + g**9*X**9 + g**44*X**12 + g**47*X**33 + g**10*X**34 + g**33*X**40),
        poly_to_lut(g*(X**6 + X**10 + X**24 + X**33) + X**9 + g**4*X**17),
    ]


def all_non_quadratics():
    """The following list was compiled by Langevin"""
    return [        
        [0,0,0,32,0,4,10,60,0,8,2,42,18,30,26,36,0,2,16,52,7,1,29,47,6,12,20,56,19,29,11,49,0,17,4,48,6,19,8,42,5,28,3,63,17,12,29,55,10,25,30,46,11,28,21,51,9,18,31,39,26,5,6,40],
        [0,0,0,8,0,26,40,58,0,33,10,35,12,55,46,29,0,11,12,15,4,21,32,57,20,62,18,48,28,44,50,10,0,6,18,28,10,22,48,36,8,47,16,63,14,51,62,11,5,24,27,14,11,12,61,50,25,37,13,57,27,61,39,9],
        [0,0,0,10,0,6,42,52,0,32,8,38,26,61,63,4,0,2,16,24,3,7,48,44,6,45,30,59,31,51,35,19,0,18,4,28,1,21,47,35,7,53,11,55,28,41,61,20,9,25,29,7,11,29,60,50,8,49,20,35,16,46,40,10],
        [0,0,0,8,0,4,40,52,0,32,10,37,26,60,62,7,0,2,19,25,1,7,50,44,4,46,29,56,31,51,32,19,0,16,7,31,2,22,45,33,6,54,11,52,30,40,61,20,8,26,28,6,11,29,63,49,10,48,20,33,19,47,43,8],
        [0,0,0,10,0,12,40,60,0,32,15,35,20,61,50,5,0,3,20,29,2,13,51,36,10,36,17,51,28,59,35,26,0,18,6,30,5,27,43,45,1,51,8,54,16,43,48,21,13,28,31,4,10,23,61,56,6,58,27,43,21,32,44,7],
        [0,0,0,14,0,8,44,58,0,32,10,38,21,56,48,1,0,2,18,30,3,9,52,32,15,36,23,48,25,63,39,29,0,16,2,28,5,29,43,45,3,51,11,55,19,46,52,21,9,27,25,5,15,21,58,62,5,62,31,40,22,32,42,0],
        [0,0,0,2,0,14,46,54,0,32,8,41,17,56,49,13,0,7,22,19,5,12,52,43,3,45,29,50,23,48,40,26,0,20,3,21,7,29,42,38,6,50,13,56,16,45,51,27,9,26,28,13,11,22,57,50,12,54,17,42,31,44,35,5],
        [0,0,0,14,0,10,40,62,0,32,5,45,27,52,50,7,0,1,28,19,7,12,59,44,3,42,26,59,31,57,34,30,0,18,6,26,5,29,43,47,4,54,7,61,26,39,53,18,8,27,18,15,10,19,48,53,15,52,16,35,22,34,45,3],
        [0,0,0,14,0,10,46,58,0,33,11,37,18,63,53,7,0,1,17,30,2,9,52,33,13,36,23,49,29,56,34,24,0,16,1,31,6,28,41,45,2,51,8,54,22,43,48,18,9,24,25,6,13,22,58,63,6,63,29,43,16,37,46,4],
        [0,0,0,8,0,10,44,58,0,32,15,33,16,61,54,1,0,3,20,31,1,8,48,37,13,39,22,50,28,59,39,26,0,20,6,26,7,25,45,47,5,49,12,54,18,43,50,17,9,30,27,4,15,18,56,57,1,63,28,44,23,36,42,3],
        [0,0,0,10,0,11,44,58,0,32,8,35,16,63,55,4,0,7,22,27,5,9,54,39,15,33,17,52,26,59,34,31,0,23,1,28,4,24,41,40,3,52,10,54,23,47,49,21,9,25,30,4,8,19,58,60,5,60,26,40,20,34,45,7],
        [0,0,0,10,0,1,46,48,0,32,11,37,28,56,58,5,0,5,16,31,2,6,52,47,1,44,26,57,31,54,33,19,0,21,4,27,5,17,47,36,3,54,12,55,26,43,56,18,8,24,28,6,15,30,61,51,10,50,21,35,17,45,43,12],
        [0,0,0,2,0,10,46,54,0,32,13,43,18,63,55,12,0,6,19,23,5,9,49,47,2,45,28,53,21,55,42,30,0,16,4,22,7,29,45,37,6,54,15,57,19,46,50,25,9,31,30,10,11,23,59,53,13,50,23,46,29,47,38,2],
        [0,0,0,1,0,4,34,52,0,32,12,46,16,60,58,7,0,10,22,29,6,8,51,47,2,41,24,49,20,51,41,31,0,19,3,17,8,31,41,44,4,55,11,58,28,35,53,27,1,24,20,12,15,18,57,54,7,63,30,36,25,45,39,2],
        [0,0,0,4,0,1,34,48,0,32,8,47,21,60,58,3,0,14,22,28,2,13,55,43,6,41,24,48,17,55,41,31,0,23,3,16,8,30,41,44,5,50,14,62,24,38,52,26,1,24,20,9,11,19,61,54,2,58,31,32,29,44,38,7],
        [0,0,0,16,0,26,6,4,0,42,34,29,47,31,37,8,0,29,40,33,63,23,16,36,17,54,25,47,1,19,32,43,0,6,7,63,45,33,46,20,19,60,53,33,17,52,29,11,1,25,45,15,19,46,58,53,3,34,12,18,62,58,26,41],
        [0,0,0,16,0,22,8,1,0,38,41,23,42,30,32,3,0,18,43,44,63,21,29,45,16,49,19,47,5,24,36,43,0,12,5,55,47,36,35,25,21,59,57,33,16,61,30,10,1,31,47,10,17,38,55,52,4,45,2,24,62,58,27,35],
        [0,0,0,16,0,22,8,1,0,38,41,22,42,31,32,3,0,19,43,45,62,20,28,44,16,49,19,46,4,25,37,43,0,12,5,55,46,37,34,24,20,59,56,32,16,61,30,11,1,30,47,11,17,38,55,52,5,45,3,25,63,58,26,34],
        [0,0,0,30,0,28,6,12,0,42,35,19,32,18,42,10,0,27,47,41,60,20,21,40,16,50,29,38,13,24,41,45,0,12,3,60,47,45,43,18,18,54,51,32,28,50,21,4,1,22,45,10,18,36,57,55,3,47,12,20,48,57,23,34],
        [0,0,0,30,0,28,6,12,0,42,35,19,32,18,42,10,0,26,46,41,60,21,20,40,17,51,29,38,12,25,41,45,0,12,3,61,47,45,43,19,19,55,50,32,29,51,20,4,1,23,44,11,18,37,56,54,3,47,13,20,48,57,22,34],
        [0,0,0,30,0,28,6,12,0,42,35,18,32,19,43,11,0,26,46,40,60,21,20,41,17,51,29,38,12,24,40,45,0,13,2,60,47,44,42,18,19,54,51,32,29,51,20,4,1,22,45,11,18,36,57,54,3,46,12,21,48,57,22,35],
    ]

def all():
    return all_quadratics() + all_non_quadratics()
